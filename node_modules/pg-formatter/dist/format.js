'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // @flow

var _child_process = require('child_process');

var _path = require('path');

var _shellQuote = require('shell-quote');

var executablePath = (0, _path.resolve)(__dirname, 'pg-formatter/pg_format');

/*:: type UserConfigurationType = {
  +anonymize?: boolean,
  +functionCase?: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',
  +keywordCase?: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',
  +placeholder?: string,
  +spaces?: number,
  +stripComments?: boolean
};*/
/*:: type ConfigurationType = {
  +anonymize: boolean,
  +functionCase: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',
  +keywordCase: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',
  +placeholder?: string,
  +spaces: number,
  +stripComments: boolean
};*/


var createConfiguration = function createConfiguration() /*: ConfigurationType*/ {
  var userConfiguration /*: UserConfigurationType*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _extends({
    anonymize: false,
    functionCase: 'unchanged',
    keywordCase: 'unchanged',
    spaces: 4,
    stripComments: false
  }, userConfiguration);
};

var functionCaseOptionValueMap = {
  capitalize: 3,
  lowercase: 1,
  unchanged: 0,
  uppercase: 2
};

var keywordCaseOptionValueMap = functionCaseOptionValueMap;

var createCommandLineArgs = function createCommandLineArgs(configuration /*: ConfigurationType*/) /*: string*/ {
  var args = [];

  if (configuration.anonymize) {
    args.push('--anonymize');
  }

  if (configuration.functionCase) {
    args.push('--function-case ' + functionCaseOptionValueMap[configuration.functionCase]);
  }

  if (configuration.keywordCase) {
    args.push('--keyword-case ' + keywordCaseOptionValueMap[configuration.keywordCase]);
  }

  if (configuration.placeholder) {
    args.push('--placeholder ' + (0, _shellQuote.quote)([configuration.placeholder]));
  }

  if (configuration.spaces) {
    args.push('--spaces ' + configuration.spaces);
  }

  if (configuration.stripComments) {
    args.push('--nocomment');
  }

  return args.join(' ');
};

exports.default = function (sql /*: string*/, userConfiguration /*:: ?: UserConfigurationType*/) {
  var configuration = createConfiguration(userConfiguration);
  var args = createCommandLineArgs(configuration);

  var result = (0, _child_process.execSync)('perl ' + executablePath + ' ' + args, {
    encoding: 'utf8',
    input: sql
  });

  return result;
};
//# sourceMappingURL=format.js.map